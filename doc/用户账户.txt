-------------用户账户-------------
----2021/01/28

--tip
    --web应用程序的核心是让任何用户都能够注册账户并能够使用它，不管用户身在何方
    --开发初期时创建能够正确工作的网站，因此几乎不需要设置任何样式。确认所需功能都能够正常运行后，在设置网站的样式，使其看起来更专业

--目标
    --创建表单
    --实现用户身份验证系统


--让用户能够输入数据
    使用django的表单创建工具来创建让用户能够输入数据的页面
    --添加新主题
        创建基于表单的页面的方法同普通页面唯一的不同是需要导入包含表单的模块【如：forms.py】
        --用于添加主题的表单
            让用户输入并提交信息的页面都是表单，哪怕看起来不想表单
            在django中，创建表单的最简单的方式是使用ModelForm,它能根据模型中的信息自动创建表单
            -forms.py
        --Url模式
            -new_topic
        --视图函数
            -new_topic()
            -处理情形：
                -刚进入new_topic网页
                -对提交的表单数据进行处理，并将用户重定向到网页topics
        --GET请求和POST请求
            -用户初次请求网页时，浏览器发送get请求
            -用户填写并提交表单时，浏览器将发送POST请求
        --模板
            new_topic
    --添加新条目
        --添加一个用于添加新条目的的表单
            -forms.py
        --url模式
            new_entry
        --视图函数
            new_entry()
        --模板
            new_entry
    --编辑条目
        --Url模式
            edit_entry
        --视图函数
            edit_entry()
        --模板
            edit_entry

--创建用户账户
    建立一个用户注册和身份验证系统，让用户能够注册账户，进而登录和注销
    创建一个新的应用程序，其中包含与处理用户账户有关的所有功能
    对模型Topic进行修改，让每个主题都归属于特定用户
    --应用程序 users
        --创建应用程序
            --将users添加到setting.py中
            --将usersURL添加到urls.py中
                -在应用程序文件中新建urls.py文件
    --登陆页面
        --url模式
            login
        --模板
            login
            【一个用户程序中的模板可继承另一个应用程序的模板】
        --链接到登陆页面
            base.html
    --注销
        让用户只点击一个链接就能退出登录并返回到主页
        --url模式
            logout
        --链接到注销视图
            base.html
    --注册页面
        使用django提供的表单UserCreationForm,但编写自己的视图函数和模板
        --Url模式
            register
        --视图函数
            register()
        --注册模板
            register
        --链接到注册页面
            base.html

--让用户拥有自己的数据
    用户应该能够输入其专有的数据
    创建一个系统，确定各项数据所属的用户，再限制对页面的访问，让用户只能使用自己的数据
    修改模型Topic，让每个主题都归属于特定用户
    --使用@login_required限制访问
        装饰器@login_required的功能：对于某些页面，只允许已登录的用户访问它们
        --限制对topics页面的访问
            每个主题都归属于特定用户所有，因此只允许已经登陆的用户请求topics页面。
                -添加装饰器
                    learning_logs/view.py
                -让django知道到哪里去寻找登陆页面
                    项目文件settings.py  LOGIN_URL字段
        --全面限制对项目“学习笔记”的访问
            必须要针对需要保护那些页面做出决定
            最好先确定项目的哪些页面不需要保护，再限制对其他所有页面的访问
            对于所有与私有用户数据相关的URL，都应限制对他们的访问
                -learning_logs/view.py中对视图函数添加装饰器进行限制
    --将数据关联到用户
        只需要将最高层的数据关联到用户，这样最底层的数据将自动关联到用户
        --修改模型Topic
        --确定当前有哪些用户
        --迁移数据库
        -tip :
            也可以使用命令：[python manage.py flush]重置数据库，这将重建数据库结构并删除所有数据，必须重新创建超级用户
    --只允许用户访问自己的主题
        对topics视图函数做出修改
    --保护用户的主题
        限制对显示单个主题页面的访问
        -在视图函数topic()获取请求的条目前进行检查
    --保护页面 edit_entry
    --将新主题关联到当前用户
        